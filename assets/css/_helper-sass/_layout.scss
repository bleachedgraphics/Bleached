// ----------------------------------------------------------------
//    Layout - Responsive & Static Grid Elements
// ----------------------------------------------------------------

// A container for each row of our layout. 
// Simply styled with only a base margin-bottom and extending the clearfix class,
// a row can also have helper classes added onto it for other general styling purposes
.row{
  @extend %clearfix;
  margin-bottom:$unit-px*5;
  margin-left:-$unit-px*10;

  &:last-child{
    margin-bottom:0;
  }
  
  // Don't need as wide gutters?  Use this class to cut them in half.
  &.half-gutter{
    margin-left:-$unit-px*5;
  }
}

// The grid columns within a row.  
// Do not apply styling to this class as its purpose is for layout only.
.col{
  @include last-child-0();
  float:left;
  margin-bottom:0;
  padding-left:$unit-px*10;
  position:relative;
  width:100%; // default width is 100%

  @media (max-device-width:480px), screen and (max-width:800px){
    margin-bottom:$unit-px*2;
  }
}

// Adjust .col padding-left to account for half-Gutter
.half-gutter .col{
  padding-left:$unit-px*5;
}

// Convert columns to inline-blocks so we can center them when our row does not add up to 100%
.c-row{
  @extend .row;
  font-size:0; // **
  text-align:center;

  .col{
    display:inline-block; 
    float:none; 
    font-size:16px; // resets the font back to the default base to fix the font-size:0 needed for centering
    text-align:left;
  }
    // ** This kills the extra white-space created by the inline-blocks.  
    //    Make sure interior elements have a font-size reaplied to them to make text visible. 
    //    (as long as they're using semantic tags or the font-size class names,  
    //    then this should not be a problem).
}

// Base responsive grid column classes. 
// Do not apply styling to these as their purpose is for width only.
.w-100{width:100%;}
.w-90 {width:90%;}
.w-80 {width:80%;}
.w-75 {width:75%;}
.w-70 {width:70%;}
.w-66 {width:66.6666%;}
.w-60 {width:60%;}
.w-50 {width:50%;}
.w-40 {width:40%;}
.w-33 {width:33.3333%;}
.w-30 {width:30%;}
.w-25 {width:25%;}
.w-20 {width:20%;}
.w-10 {width:10%;}

@media (max-device-width:480px), screen and (max-width:800px){
  .w-90, .w-80, .w-75, .w-70, .w-66,
  .w-60, .w-50, .w-40, .w-33, .w-30,
  .w-25, .w-20, .w-10{
    width:100%;
  }
}

.rfl{
  @include row-fixed-left(300px);
}
.rfr{
  @include row-fixed-right(300px);
}
  // make sure to use .f-Col for the fixed column in the row

// The block class can be modified or deleted and replaced with other classes (like .media or .callout) 
// The main purpose of a class like this is to apply to an inner HTML element of the column structure
// so we can apply styling to the columns.
.block{
  @include last-child-0();
  background:$c-grey;
  color:#333;
  padding:$unit-px;
}

// Make a column have borders on the left/right sides of it
// build out a better example of this
.b-col{
  padding-left:6px;
  padding-right:6px;
  position:relative;

  &:after, &:before{
    background:url("../img/border.png") no-repeat 0 -20px;
    content:"";
    height:200px;
    opacity:0.2;
    position:absolute;
    top:0;
    width:1px;
  }

  &:after{
    right:-14px;
  }
  
  &:before{
    left:-14px;
  }  
}
